import random
from datareader import player_stat_ripper
from player_cards import user_profile, opponent_profile

#feed into probabilities below
offense_name = user_profile['name']
defense_name = opponent_profile['name']
offense_stamina = user_profile['stamina']
defense_stamina = user_profile['stamina']
offense_speed = user_profile['speed']
defense_speed = user_profile['speed']
#how these are defined needs to change; there has to be an easier way

#weighted probabilities
offense_to_take_shot = [float(player_stat_ripper(offense_name, 'TOV%')), (100 - float(player_stat_ripper(offense_name, 'TOV%')))]
defense_to_steal = [(100 - float(player_stat_ripper(defense_name, 'STL%'))), (float(player_stat_ripper(defense_name, 'STL%')))] 
defense_to_block = '' #not calculated yet
defense_to_rebound = '' #see above
offense_to_score = '' #see above
offense_to_orebound = '' #see above

#weighted probability roller
def encounterweights(weights):
    totals = []
    running_total = 0

    for w in weights:
        running_total += w
        totals.append(running_total)

    rnd = random.random() * running_total
    for i, total in enumerate(totals):
        if rnd < total:
            return i
        
#redefine these functions into a class
def stamina_comp_check(ostamina, dstamina):
    if ostamina > dstamina:
        return offense_name
    else:
        return defense_name

def speed_comp_check(ospeed, dspeed):
    if ospeed > dspeed:
        return offense_name
    else:
        return defense_name

######################################
# fail or success checks - merge these functions
######################################

def off_fail_long(defcheck):
    if encounterweights(defcheck) == 0:
        return stamina_comp_check(offense_stamina, defense_stamina)
    else:
        return defense_name


def off_suc_long(offcheck):
    if encounterweights(offcheck) == 0: 
        return offense_name
    else:
        return speed_comp_check(offense_speed, defense_speed) 


####################################
#long range shot; 3 pt shot
def offense_long_range(offense, defense):
    if encounterweights(offense) == 0: #
        return off_fail_long(defense)
    else:
        return off_suc_long(defense)
    
#mid range shot; from 10ft to <3 point shot
#def offense_mid_range(offense, defense):
 #   if encounterweights(offense) == 0: # not written yet
  #      return offfail(defense)
   # else:
    #    return offsuccede(defense) 

#close range shot; from DUNK/layup to 10ft
#def offense_close_range(offense, defense):
 #   if encounterweights(offense) == 0: # not written yet
  #      return offfail(defense)
   # else:
    #    return offsuccede(defense) 
     
#testing output
i = 0
counter = []
while i < 100:

    output_counter = offense_long_range(offense_to_take_shot, defense_to_steal)
    counter.append(output_counter)
    i += 1
    
counters = ''.join(counter)

print offense_name + ' : ' + str(counters.count(offense_name))
print defense_name + ' : ' + str(counters.count(defense_name))

raw_input()

